// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: CRExchange.proto

package Exchange

import (
	context "context"
	Req "github.com/DEEBBLUE/ExProtos/api/Req"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CRExchange_CreateCRExchange_FullMethodName  = "/exchange.CRExchange/CreateCRExchange"
	CRExchange_TakeCRExhangeList_FullMethodName = "/exchange.CRExchange/TakeCRExhangeList"
	CRExchange_GiveDetails_FullMethodName       = "/exchange.CRExchange/GiveDetails"
	CRExchange_Confirm_FullMethodName           = "/exchange.CRExchange/Confirm"
)

// CRExchangeClient is the client API for CRExchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRExchangeClient interface {
	CreateCRExchange(ctx context.Context, in *Req.CreateExchangeReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Req.DefaultRes], error)
	TakeCRExhangeList(ctx context.Context, in *Req.EmptyReq, opts ...grpc.CallOption) (*Req.RepeatListExRes, error)
	GiveDetails(ctx context.Context, in *Req.InitBankDetailExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	Confirm(ctx context.Context, in *Req.ConfirmReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
}

type cRExchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewCRExchangeClient(cc grpc.ClientConnInterface) CRExchangeClient {
	return &cRExchangeClient{cc}
}

func (c *cRExchangeClient) CreateCRExchange(ctx context.Context, in *Req.CreateExchangeReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Req.DefaultRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CRExchange_ServiceDesc.Streams[0], CRExchange_CreateCRExchange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Req.CreateExchangeReq, Req.DefaultRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CRExchange_CreateCRExchangeClient = grpc.ServerStreamingClient[Req.DefaultRes]

func (c *cRExchangeClient) TakeCRExhangeList(ctx context.Context, in *Req.EmptyReq, opts ...grpc.CallOption) (*Req.RepeatListExRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.RepeatListExRes)
	err := c.cc.Invoke(ctx, CRExchange_TakeCRExhangeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRExchangeClient) GiveDetails(ctx context.Context, in *Req.InitBankDetailExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, CRExchange_GiveDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRExchangeClient) Confirm(ctx context.Context, in *Req.ConfirmReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, CRExchange_Confirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRExchangeServer is the server API for CRExchange service.
// All implementations must embed UnimplementedCRExchangeServer
// for forward compatibility.
type CRExchangeServer interface {
	CreateCRExchange(*Req.CreateExchangeReq, grpc.ServerStreamingServer[Req.DefaultRes]) error
	TakeCRExhangeList(context.Context, *Req.EmptyReq) (*Req.RepeatListExRes, error)
	GiveDetails(context.Context, *Req.InitBankDetailExchangeReq) (*Req.DefaultRes, error)
	Confirm(context.Context, *Req.ConfirmReq) (*Req.DefaultRes, error)
	mustEmbedUnimplementedCRExchangeServer()
}

// UnimplementedCRExchangeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCRExchangeServer struct{}

func (UnimplementedCRExchangeServer) CreateCRExchange(*Req.CreateExchangeReq, grpc.ServerStreamingServer[Req.DefaultRes]) error {
	return status.Errorf(codes.Unimplemented, "method CreateCRExchange not implemented")
}
func (UnimplementedCRExchangeServer) TakeCRExhangeList(context.Context, *Req.EmptyReq) (*Req.RepeatListExRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeCRExhangeList not implemented")
}
func (UnimplementedCRExchangeServer) GiveDetails(context.Context, *Req.InitBankDetailExchangeReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveDetails not implemented")
}
func (UnimplementedCRExchangeServer) Confirm(context.Context, *Req.ConfirmReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedCRExchangeServer) mustEmbedUnimplementedCRExchangeServer() {}
func (UnimplementedCRExchangeServer) testEmbeddedByValue()                    {}

// UnsafeCRExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRExchangeServer will
// result in compilation errors.
type UnsafeCRExchangeServer interface {
	mustEmbedUnimplementedCRExchangeServer()
}

func RegisterCRExchangeServer(s grpc.ServiceRegistrar, srv CRExchangeServer) {
	// If the following call pancis, it indicates UnimplementedCRExchangeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CRExchange_ServiceDesc, srv)
}

func _CRExchange_CreateCRExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req.CreateExchangeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CRExchangeServer).CreateCRExchange(m, &grpc.GenericServerStream[Req.CreateExchangeReq, Req.DefaultRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CRExchange_CreateCRExchangeServer = grpc.ServerStreamingServer[Req.DefaultRes]

func _CRExchange_TakeCRExhangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRExchangeServer).TakeCRExhangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRExchange_TakeCRExhangeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRExchangeServer).TakeCRExhangeList(ctx, req.(*Req.EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRExchange_GiveDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.InitBankDetailExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRExchangeServer).GiveDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRExchange_GiveDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRExchangeServer).GiveDetails(ctx, req.(*Req.InitBankDetailExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRExchange_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.ConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRExchangeServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRExchange_Confirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRExchangeServer).Confirm(ctx, req.(*Req.ConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CRExchange_ServiceDesc is the grpc.ServiceDesc for CRExchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRExchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.CRExchange",
	HandlerType: (*CRExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TakeCRExhangeList",
			Handler:    _CRExchange_TakeCRExhangeList_Handler,
		},
		{
			MethodName: "GiveDetails",
			Handler:    _CRExchange_GiveDetails_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _CRExchange_Confirm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCRExchange",
			Handler:       _CRExchange_CreateCRExchange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "CRExchange.proto",
}
