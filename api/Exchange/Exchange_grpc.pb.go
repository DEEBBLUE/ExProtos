// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: Exchange.proto

package Exchange

import (
	context "context"
	Req "github.com/DEEBBLUE/ExProtos/api/Req"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Exchange_CreateNewExchange_FullMethodName = "/exchange.Exchange/CreateNewExchange"
	Exchange_TakeNewExhange_FullMethodName    = "/exchange.Exchange/TakeNewExhange"
	Exchange_GiveDetails_FullMethodName       = "/exchange.Exchange/GiveDetails"
	Exchange_ClientConfirm_FullMethodName     = "/exchange.Exchange/ClientConfirm"
	Exchange_OperConfirm_FullMethodName       = "/exchange.Exchange/OperConfirm"
)

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeClient interface {
	CreateNewExchange(ctx context.Context, in *Req.CreateExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	TakeNewExhange(ctx context.Context, in *Req.RepeatExchangeReq, opts ...grpc.CallOption) (*Req.RepeatExchangeRes, error)
	GiveDetails(ctx context.Context, in *Req.InitBankDetailExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	ClientConfirm(ctx context.Context, in *ClientConfirmReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	OperConfirm(ctx context.Context, in *OperConfirmReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) CreateNewExchange(ctx context.Context, in *Req.CreateExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Exchange_CreateNewExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) TakeNewExhange(ctx context.Context, in *Req.RepeatExchangeReq, opts ...grpc.CallOption) (*Req.RepeatExchangeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.RepeatExchangeRes)
	err := c.cc.Invoke(ctx, Exchange_TakeNewExhange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GiveDetails(ctx context.Context, in *Req.InitBankDetailExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Exchange_GiveDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ClientConfirm(ctx context.Context, in *ClientConfirmReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Exchange_ClientConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) OperConfirm(ctx context.Context, in *OperConfirmReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Exchange_OperConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
// All implementations must embed UnimplementedExchangeServer
// for forward compatibility.
type ExchangeServer interface {
	CreateNewExchange(context.Context, *Req.CreateExchangeReq) (*Req.DefaultRes, error)
	TakeNewExhange(context.Context, *Req.RepeatExchangeReq) (*Req.RepeatExchangeRes, error)
	GiveDetails(context.Context, *Req.InitBankDetailExchangeReq) (*Req.DefaultRes, error)
	ClientConfirm(context.Context, *ClientConfirmReq) (*Req.DefaultRes, error)
	OperConfirm(context.Context, *OperConfirmReq) (*Req.DefaultRes, error)
	mustEmbedUnimplementedExchangeServer()
}

// UnimplementedExchangeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExchangeServer struct{}

func (UnimplementedExchangeServer) CreateNewExchange(context.Context, *Req.CreateExchangeReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewExchange not implemented")
}
func (UnimplementedExchangeServer) TakeNewExhange(context.Context, *Req.RepeatExchangeReq) (*Req.RepeatExchangeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeNewExhange not implemented")
}
func (UnimplementedExchangeServer) GiveDetails(context.Context, *Req.InitBankDetailExchangeReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveDetails not implemented")
}
func (UnimplementedExchangeServer) ClientConfirm(context.Context, *ClientConfirmReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientConfirm not implemented")
}
func (UnimplementedExchangeServer) OperConfirm(context.Context, *OperConfirmReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperConfirm not implemented")
}
func (UnimplementedExchangeServer) mustEmbedUnimplementedExchangeServer() {}
func (UnimplementedExchangeServer) testEmbeddedByValue()                  {}

// UnsafeExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServer will
// result in compilation errors.
type UnsafeExchangeServer interface {
	mustEmbedUnimplementedExchangeServer()
}

func RegisterExchangeServer(s grpc.ServiceRegistrar, srv ExchangeServer) {
	// If the following call pancis, it indicates UnimplementedExchangeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Exchange_ServiceDesc, srv)
}

func _Exchange_CreateNewExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.CreateExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CreateNewExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CreateNewExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CreateNewExchange(ctx, req.(*Req.CreateExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_TakeNewExhange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.RepeatExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).TakeNewExhange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_TakeNewExhange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).TakeNewExhange(ctx, req.(*Req.RepeatExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GiveDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.InitBankDetailExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GiveDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_GiveDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GiveDetails(ctx, req.(*Req.InitBankDetailExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ClientConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ClientConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ClientConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ClientConfirm(ctx, req.(*ClientConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_OperConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).OperConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_OperConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).OperConfirm(ctx, req.(*OperConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Exchange_ServiceDesc is the grpc.ServiceDesc for Exchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewExchange",
			Handler:    _Exchange_CreateNewExchange_Handler,
		},
		{
			MethodName: "TakeNewExhange",
			Handler:    _Exchange_TakeNewExhange_Handler,
		},
		{
			MethodName: "GiveDetails",
			Handler:    _Exchange_GiveDetails_Handler,
		},
		{
			MethodName: "ClientConfirm",
			Handler:    _Exchange_ClientConfirm_Handler,
		},
		{
			MethodName: "OperConfirm",
			Handler:    _Exchange_OperConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Exchange.proto",
}
