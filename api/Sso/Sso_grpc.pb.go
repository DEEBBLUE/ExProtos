// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: Sso.proto

package Sso

import (
	context "context"
	Req "github.com/DEEBBLUE/ExProtos/api/Req"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sso_Access_FullMethodName      = "/sso.Sso/Access"
	Sso_Refresh_FullMethodName     = "/sso.Sso/Refresh"
	Sso_RoleConfirm_FullMethodName = "/sso.Sso/RoleConfirm"
)

// SsoClient is the client API for Sso service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsoClient interface {
	Access(ctx context.Context, in *Req.AccessReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	Refresh(ctx context.Context, in *Req.RefreshReq, opts ...grpc.CallOption) (*Req.RefreshRes, error)
	RoleConfirm(ctx context.Context, in *Req.RoleReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
}

type ssoClient struct {
	cc grpc.ClientConnInterface
}

func NewSsoClient(cc grpc.ClientConnInterface) SsoClient {
	return &ssoClient{cc}
}

func (c *ssoClient) Access(ctx context.Context, in *Req.AccessReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Sso_Access_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) Refresh(ctx context.Context, in *Req.RefreshReq, opts ...grpc.CallOption) (*Req.RefreshRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.RefreshRes)
	err := c.cc.Invoke(ctx, Sso_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) RoleConfirm(ctx context.Context, in *Req.RoleReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Sso_RoleConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsoServer is the server API for Sso service.
// All implementations must embed UnimplementedSsoServer
// for forward compatibility.
type SsoServer interface {
	Access(context.Context, *Req.AccessReq) (*Req.DefaultRes, error)
	Refresh(context.Context, *Req.RefreshReq) (*Req.RefreshRes, error)
	RoleConfirm(context.Context, *Req.RoleReq) (*Req.DefaultRes, error)
	mustEmbedUnimplementedSsoServer()
}

// UnimplementedSsoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSsoServer struct{}

func (UnimplementedSsoServer) Access(context.Context, *Req.AccessReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}
func (UnimplementedSsoServer) Refresh(context.Context, *Req.RefreshReq) (*Req.RefreshRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedSsoServer) RoleConfirm(context.Context, *Req.RoleReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleConfirm not implemented")
}
func (UnimplementedSsoServer) mustEmbedUnimplementedSsoServer() {}
func (UnimplementedSsoServer) testEmbeddedByValue()             {}

// UnsafeSsoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsoServer will
// result in compilation errors.
type UnsafeSsoServer interface {
	mustEmbedUnimplementedSsoServer()
}

func RegisterSsoServer(s grpc.ServiceRegistrar, srv SsoServer) {
	// If the following call pancis, it indicates UnimplementedSsoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sso_ServiceDesc, srv)
}

func _Sso_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.AccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sso_Access_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Access(ctx, req.(*Req.AccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.RefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sso_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Refresh(ctx, req.(*Req.RefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_RoleConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.RoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).RoleConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sso_RoleConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).RoleConfirm(ctx, req.(*Req.RoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sso_ServiceDesc is the grpc.ServiceDesc for Sso service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sso_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.Sso",
	HandlerType: (*SsoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Access",
			Handler:    _Sso_Access_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Sso_Refresh_Handler,
		},
		{
			MethodName: "RoleConfirm",
			Handler:    _Sso_RoleConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Sso.proto",
}
