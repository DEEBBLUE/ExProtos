// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: DataBase.proto

package Database

import (
	context "context"
	Req "github.com/DEEBBLUE/GoProtos/api/Req"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Database_CreateUser_FullMethodName             = "/database.Database/CreateUser"
	Database_RepeatUser_FullMethodName             = "/database.Database/RepeatUser"
	Database_ChangeRoleUser_FullMethodName         = "/database.Database/ChangeRoleUser"
	Database_ChangeVerifeStatusUser_FullMethodName = "/database.Database/ChangeVerifeStatusUser"
	Database_ChangeBalanceUser_FullMethodName      = "/database.Database/ChangeBalanceUser"
	Database_CreateExchange_FullMethodName         = "/database.Database/CreateExchange"
	Database_RepeatExchange_FullMethodName         = "/database.Database/RepeatExchange"
	Database_InitOperExchange_FullMethodName       = "/database.Database/InitOperExchange"
	Database_InitBankDetailExchange_FullMethodName = "/database.Database/InitBankDetailExchange"
	Database_ChangeStatusExchange_FullMethodName   = "/database.Database/ChangeStatusExchange"
	Database_RepeatUserHistory_FullMethodName      = "/database.Database/RepeatUserHistory"
)

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	// User
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	RepeatUser(ctx context.Context, in *RepeatUserReq, opts ...grpc.CallOption) (*RepeatUserRes, error)
	ChangeRoleUser(ctx context.Context, in *ChangeRoleUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	ChangeVerifeStatusUser(ctx context.Context, in *ChangeVerifeStatusUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	ChangeBalanceUser(ctx context.Context, in *ChangeBalanceUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	// Change
	CreateExchange(ctx context.Context, in *Req.CreateExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	RepeatExchange(ctx context.Context, in *Req.RepeatExchangeReq, opts ...grpc.CallOption) (*Req.RepeatExchangeRes, error)
	InitOperExchange(ctx context.Context, in *Req.InitOperExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	InitBankDetailExchange(ctx context.Context, in *Req.InitBankDetailExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	ChangeStatusExchange(ctx context.Context, in *Req.ChangeStatusExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	// Searching
	RepeatUserHistory(ctx context.Context, in *RepeatUserHistoryReq, opts ...grpc.CallOption) (*RepeatUserHistoryRes, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RepeatUser(ctx context.Context, in *RepeatUserReq, opts ...grpc.CallOption) (*RepeatUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepeatUserRes)
	err := c.cc.Invoke(ctx, Database_RepeatUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) ChangeRoleUser(ctx context.Context, in *ChangeRoleUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_ChangeRoleUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) ChangeVerifeStatusUser(ctx context.Context, in *ChangeVerifeStatusUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_ChangeVerifeStatusUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) ChangeBalanceUser(ctx context.Context, in *ChangeBalanceUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_ChangeBalanceUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) CreateExchange(ctx context.Context, in *Req.CreateExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_CreateExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RepeatExchange(ctx context.Context, in *Req.RepeatExchangeReq, opts ...grpc.CallOption) (*Req.RepeatExchangeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.RepeatExchangeRes)
	err := c.cc.Invoke(ctx, Database_RepeatExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) InitOperExchange(ctx context.Context, in *Req.InitOperExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_InitOperExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) InitBankDetailExchange(ctx context.Context, in *Req.InitBankDetailExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_InitBankDetailExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) ChangeStatusExchange(ctx context.Context, in *Req.ChangeStatusExchangeReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_ChangeStatusExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RepeatUserHistory(ctx context.Context, in *RepeatUserHistoryReq, opts ...grpc.CallOption) (*RepeatUserHistoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepeatUserHistoryRes)
	err := c.cc.Invoke(ctx, Database_RepeatUserHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility.
type DatabaseServer interface {
	// User
	CreateUser(context.Context, *CreateUserReq) (*Req.DefaultRes, error)
	RepeatUser(context.Context, *RepeatUserReq) (*RepeatUserRes, error)
	ChangeRoleUser(context.Context, *ChangeRoleUserReq) (*Req.DefaultRes, error)
	ChangeVerifeStatusUser(context.Context, *ChangeVerifeStatusUserReq) (*Req.DefaultRes, error)
	ChangeBalanceUser(context.Context, *ChangeBalanceUserReq) (*Req.DefaultRes, error)
	// Change
	CreateExchange(context.Context, *Req.CreateExchangeReq) (*Req.DefaultRes, error)
	RepeatExchange(context.Context, *Req.RepeatExchangeReq) (*Req.RepeatExchangeRes, error)
	InitOperExchange(context.Context, *Req.InitOperExchangeReq) (*Req.DefaultRes, error)
	InitBankDetailExchange(context.Context, *Req.InitBankDetailExchangeReq) (*Req.DefaultRes, error)
	ChangeStatusExchange(context.Context, *Req.ChangeStatusExchangeReq) (*Req.DefaultRes, error)
	// Searching
	RepeatUserHistory(context.Context, *RepeatUserHistoryReq) (*RepeatUserHistoryRes, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseServer struct{}

func (UnimplementedDatabaseServer) CreateUser(context.Context, *CreateUserReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDatabaseServer) RepeatUser(context.Context, *RepeatUserReq) (*RepeatUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatUser not implemented")
}
func (UnimplementedDatabaseServer) ChangeRoleUser(context.Context, *ChangeRoleUserReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoleUser not implemented")
}
func (UnimplementedDatabaseServer) ChangeVerifeStatusUser(context.Context, *ChangeVerifeStatusUserReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVerifeStatusUser not implemented")
}
func (UnimplementedDatabaseServer) ChangeBalanceUser(context.Context, *ChangeBalanceUserReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBalanceUser not implemented")
}
func (UnimplementedDatabaseServer) CreateExchange(context.Context, *Req.CreateExchangeReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchange not implemented")
}
func (UnimplementedDatabaseServer) RepeatExchange(context.Context, *Req.RepeatExchangeReq) (*Req.RepeatExchangeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatExchange not implemented")
}
func (UnimplementedDatabaseServer) InitOperExchange(context.Context, *Req.InitOperExchangeReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOperExchange not implemented")
}
func (UnimplementedDatabaseServer) InitBankDetailExchange(context.Context, *Req.InitBankDetailExchangeReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitBankDetailExchange not implemented")
}
func (UnimplementedDatabaseServer) ChangeStatusExchange(context.Context, *Req.ChangeStatusExchangeReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatusExchange not implemented")
}
func (UnimplementedDatabaseServer) RepeatUserHistory(context.Context, *RepeatUserHistoryReq) (*RepeatUserHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatUserHistory not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}
func (UnimplementedDatabaseServer) testEmbeddedByValue()                  {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RepeatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RepeatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_RepeatUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RepeatUser(ctx, req.(*RepeatUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_ChangeRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).ChangeRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_ChangeRoleUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).ChangeRoleUser(ctx, req.(*ChangeRoleUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_ChangeVerifeStatusUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVerifeStatusUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).ChangeVerifeStatusUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_ChangeVerifeStatusUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).ChangeVerifeStatusUser(ctx, req.(*ChangeVerifeStatusUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_ChangeBalanceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBalanceUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).ChangeBalanceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_ChangeBalanceUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).ChangeBalanceUser(ctx, req.(*ChangeBalanceUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_CreateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.CreateExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_CreateExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateExchange(ctx, req.(*Req.CreateExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RepeatExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.RepeatExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RepeatExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_RepeatExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RepeatExchange(ctx, req.(*Req.RepeatExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_InitOperExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.InitOperExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).InitOperExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_InitOperExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).InitOperExchange(ctx, req.(*Req.InitOperExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_InitBankDetailExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.InitBankDetailExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).InitBankDetailExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_InitBankDetailExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).InitBankDetailExchange(ctx, req.(*Req.InitBankDetailExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_ChangeStatusExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.ChangeStatusExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).ChangeStatusExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_ChangeStatusExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).ChangeStatusExchange(ctx, req.(*Req.ChangeStatusExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RepeatUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatUserHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RepeatUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_RepeatUserHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RepeatUserHistory(ctx, req.(*RepeatUserHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Database_CreateUser_Handler,
		},
		{
			MethodName: "RepeatUser",
			Handler:    _Database_RepeatUser_Handler,
		},
		{
			MethodName: "ChangeRoleUser",
			Handler:    _Database_ChangeRoleUser_Handler,
		},
		{
			MethodName: "ChangeVerifeStatusUser",
			Handler:    _Database_ChangeVerifeStatusUser_Handler,
		},
		{
			MethodName: "ChangeBalanceUser",
			Handler:    _Database_ChangeBalanceUser_Handler,
		},
		{
			MethodName: "CreateExchange",
			Handler:    _Database_CreateExchange_Handler,
		},
		{
			MethodName: "RepeatExchange",
			Handler:    _Database_RepeatExchange_Handler,
		},
		{
			MethodName: "InitOperExchange",
			Handler:    _Database_InitOperExchange_Handler,
		},
		{
			MethodName: "InitBankDetailExchange",
			Handler:    _Database_InitBankDetailExchange_Handler,
		},
		{
			MethodName: "ChangeStatusExchange",
			Handler:    _Database_ChangeStatusExchange_Handler,
		},
		{
			MethodName: "RepeatUserHistory",
			Handler:    _Database_RepeatUserHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DataBase.proto",
}
